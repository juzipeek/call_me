// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "call_me": Application Contexts
//
// Command:
// $ goagen
// --design=call_me/design
// --out=$(GOPATH)/src
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// DialCallMeContext provides the call_me dial action context.
type DialCallMeContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	UID     int
	Payload *CallMePayLoad
}

// NewDialCallMeContext parses the incoming request URL and body, performs validations and creates the
// context used by the call_me controller dial action.
func NewDialCallMeContext(ctx context.Context, r *http.Request, service *goa.Service) (*DialCallMeContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DialCallMeContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramUID := req.Params["uid"]
	if len(paramUID) > 0 {
		rawUID := paramUID[0]
		if uid, err2 := strconv.Atoi(rawUID); err2 == nil {
			rctx.UID = uid
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("uid", rawUID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DialCallMeContext) OK(r *SayHiMedia) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
